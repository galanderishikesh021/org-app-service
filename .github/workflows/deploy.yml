name: Deploy to GCP

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER_NAME }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  REGISTRY: gcr.io
  SERVICE: app

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Google Auth
      id: auth
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: Configure Docker
      run: gcloud auth configure-docker

    - name: Build
      run: |
        docker build -t "$REGISTRY/$PROJECT_ID/$SERVICE:$GITHUB_SHA" .
        docker tag "$REGISTRY/$PROJECT_ID/$SERVICE:$GITHUB_SHA" "$REGISTRY/$PROJECT_ID/$SERVICE:latest"

    - name: Push
      run: |
        docker push "$REGISTRY/$PROJECT_ID/$SERVICE:$GITHUB_SHA"
        docker push "$REGISTRY/$PROJECT_ID/$SERVICE:latest"

  deploy-infrastructure:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    strategy:
      matrix:
        environment: [dev, staging, prod]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Google Auth
      id: auth
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -var-file="../environment/${{ matrix.environment }}/${{ matrix.environment }}-terraform.tfvars"

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      run: |
        cd terraform
        terraform apply -auto-approve -var-file="../environment/${{ matrix.environment }}/${{ matrix.environment }}-terraform.tfvars"

  deploy-application:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    strategy:
      matrix:
        environment: [dev, staging, prod]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Google Auth
      id: auth
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $PROJECT_ID

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Deploy Istio configurations
      run: |
        kubectl apply -f istio/authorizationpolicy.yaml
        kubectl apply -f istio/peerauthentication.yaml
        kubectl apply -f istio/${{ matrix.environment }}/gateway-${{ matrix.environment }}.yaml
        kubectl apply -f istio/${{ matrix.environment }}/${{ matrix.environment }}-cert-manager-issuer.yaml
        kubectl apply -f istio/${{ matrix.environment }}/${{ matrix.environment }}-certificates.yaml

    - name: Deploy application with Helm
      run: |
        helm upgrade --install $SERVICE-${{ matrix.environment }} helm/app \
          --namespace ${{ matrix.environment }} \
          --create-namespace \
          --values environment/${{ matrix.environment }}/${{ matrix.environment }}-values.yaml \
          --set image.tag=$GITHUB_SHA \
          --set image.repository=$REGISTRY/$PROJECT_ID/$SERVICE \
          --wait --timeout=10m

    - name: Verify deployment
      run: |
        kubectl get pods -n ${{ matrix.environment }}
        kubectl get services -n ${{ matrix.environment }}
        kubectl get ingress -n ${{ matrix.environment }}

  security-scan:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
