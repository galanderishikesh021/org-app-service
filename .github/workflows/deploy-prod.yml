name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy even if tests fail'
        required: false
        default: 'false'
        type: boolean

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER_NAME }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  REGISTRY: gcr.io
  SERVICE: app
  ENVIRONMENT: prod
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Make scripts executable
        run: chmod +x scripts/*.sh

      - name: Run validation stage
        run: ./scripts/validate.sh ${{ env.ENVIRONMENT }}

  build:
    needs: validate
    runs-on: ubuntu-latest
    if: always() && (needs.validate.result == 'success' || github.event.inputs.force_deploy == 'true')
    steps:

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Make scripts executable
        run: chmod +x scripts/*.sh

      - name: Run build stage
        run: ./scripts/build.sh ${{ env.ENVIRONMENT }}

  plan:
    needs: build
    runs-on: ubuntu-latest
    if: always() && (needs.build.result == 'success' || github.event.inputs.force_deploy == 'true')
    steps:
      
      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Make scripts executable
        run: chmod +x scripts/*.sh

      - name: Run plan stage
        run: ./scripts/plan.sh ${{ env.ENVIRONMENT }}

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan-prod
          path: terraform/tfplan

  deploy:
    needs: plan
    runs-on: ubuntu-latest
    if: always() && (needs.plan.result == 'success' || github.event.inputs.force_deploy == 'true')
    steps:
      
      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Download Terraform Plan
        uses: actions/download-artifact@v3
        with:
          name: terraform-plan-prod
          path: terraform

      - name: Make scripts executable
        run: chmod +x scripts/*.sh

      - name: Run deploy stage
        run: ./scripts/apply.sh ${{ env.ENVIRONMENT }}

  post-apply:
    needs: deploy
    runs-on: ubuntu-latest
    if: always() && (needs.deploy.result == 'success' || github.event.inputs.force_deploy == 'true')
    steps:
      
      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Make scripts executable
        run: chmod +x scripts/*.sh

      - name: Run post-apply stage
        run: ./scripts/post-apply.sh ${{ env.ENVIRONMENT }}

  
  notify-on-failure:
    if: failure()
    runs-on: ubuntu-latest
    steps:
    - name: Notify Slack on Failure
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"Deployment failed on *${{ github.ref }}* for *${{ github.repository }}*\"}" \
          $SLACK_WEBHOOK_URL
